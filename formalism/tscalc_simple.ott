metavar termvar, x, y, z, p ::=   {{ com  term variable }} 
{{ isa string}} {{ coq nat}} {{ hol string}} {{ coq-equality }}
{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[termvar]]} }}

metavar statevar, S ::=  {{ com  state variable }}
metavar methvar, m ::=  {{ com  method variable }}

metavar infertypevar, a {{ tex \alpha }} ::= {{ com type variable }}
metavar inferctxvar, g {{ tex \gamma }} ::= {{ com context variable }}


indexvar i, j, k ::=

grammar
v :: 'v_' ::=                                                                        {{ com values }}
  | unit                                                      ::  :: Unit            {{ com unit lit. }}
  | o @ S                                                     ::  :: Object          {{ com object lit. }}
  | \ ( </ xi : Ti >> Ti' // i /> ) . t                       ::  :: FunDef          {{ com function lit. }}
  | \ ( </ xi // i /> ) . t                                   :: M:: FunDefErased    {{ com function literal (types erased) }}

t :: 't_' ::=                                                                        {{ com terms    }}
  | v                                                         ::  :: Value           {{ com value    }}
  | let x = t in t'                                           ::  :: LetBind         {{ com let binding }}
  | x := t                                                    ::  :: VarUpdate       {{ com update }}
  | x ( </ xi // i /> )                                       ::  :: FunCall         {{ com fun. call }}
  | x . m                                                     ::  :: MethCall        {{ com method inv. }}
  | t ; t'                                                    ::  :: Seq             {{ com sequencing }}
  | { </ xi / yi // i /> } t                                  :: M:: Subst           {{ com substitution }}


o :: 'o_' ::=                                    {{ com object defn. }}
  | [ </ svi // i /> ]      ::  :: Body

sv :: 'sv_' ::=
  | S { </ mi = ( vi , Si ) // i /> }    ::  :: State {{ com state declaration }}

T :: 'T_' ::=                                                               {{ com types               }}
  | O @ S                                                   ::   :: ObjType {{ com object              }}
  | Unit                                                    ::   :: Unit    {{ com unit                }}
  | ( </ Ti >> Ti' // i /> ) -> T                           ::   :: Fun     {{ com function            }}
  | forall </ ai // i /> . T                               ::  M:: UniType {{ com universal quantification }}

O :: 'O_' ::=                                                         {{ com states }}
  | { </ sti // i /> }                          ::   :: Protocol

st :: 'st_' ::=
  | S { </ mi : Ti >> Si // i /> }       ::  :: State {{ com state type }}

G {{ tex \Gamma }} :: 'G_' ::=             {{ com contexts }}
  | empty                  ::  :: Empty    {{ com empty context }}
  | </ xi : Ti // i />     ::  :: VarList  {{ com variable type list }}
  | G , G'                 ::  :: Concat   {{ com concatenation of contexts }}

mu {{ tex \mu }} :: 'mu_' ::=                 {{ com stores }}
  | empty                      ::  :: Empty   {{ com empty store }}
  | </ xi |-> vi // i />       ::  :: VarList {{ com variable mapping list }}
  | mu , mu'                   ::  :: Concat  {{ com concatenation of stores }}
  | mu [ x |-> v ]             :: M:: Replace

C :: 'C_' ::=                                      {{ com constraints         }}
  | empty                      ::  :: Empty        {{ com no constraint       }}
  | ctxc                       ::  :: Context      {{ com context constr.  }}
  | tyc                        ::  :: Type         {{ com type constr.     }}
  | protoc                     ::  :: Protocol     {{ com protocol constr. }}
  | B^ </ Ci // i />           :: M:: CList        {{ com list conjunction }}
  | C ^ C'                     ::  :: CAnd         {{ com conjunction }}

ctxc {{ tex \mathcal{C} }} :: 'gc_' ::=                   {{ com context constraints }}
  | ex </ gi // i /> . C            ::  :: ExGamma      {{ com context variable }}
  | g = empty                       ::  :: Empty        {{ com empty context }}
  | free g                          ::  :: Free         {{ com free context  }}
  | g = g'                          ::  :: Equality     {{ com context equality }}
  | g = g' , </ xi : tinfi // i />  ::  :: Explicit     {{ com extension }}
  | g = g' [ x |-> tinf ]           ::  :: Replacement  {{ com replacement }}
  | g = g' - { x }                  ::  :: Removal      {{ com removal }}
  | x : tinf setin g                ::  :: Var          {{ com variable type }}

tyc {{ tex \mathcal{T} }} :: 't_' ::=                                    {{ com type expr. constraints }}
  | ex </ ai // i /> . C      ::  :: ExTy         {{ com type variable }}
  | tinf = tinf'              ::  :: TypeEquality {{ com type equality }}

protoc {{ tex \mathcal{P} }} :: 'p_' ::=                     {{ com protocol constraints }}
  | m : tinf => a setin a' @ a''   ::  :: Method        {{ com method }}

tinf {{ tex \mathbb{T} }} :: 'TInf_' ::=                    {{ com type expressions }}
  | a                                       ::  :: Hole     {{ com type variable }}
  | a @ a'                                  ::  :: Object   {{ com object }}
  | Unit                                    ::  :: Unit     {{ com unit }}
  | ( </ tinfi >> tinfi' // i /> ) -> tinf    ::  :: FunType  {{ com function }}

terminals :: 'terminals_' ::=
  | \            ::  :: lambda     {{ tex \lambda }}
  | -->          ::  :: red        {{ tex \longrightarrow }}
  | >>           ::  :: typechange {{ tex \gg }}
  | ->           ::  :: func       {{ tex \rightarrow }}
  | =>           ::  :: match      {{ tex \Rightarrow }}
  | empty        ::  :: empty      {{ tex \emptyset }}
  | |->          ::  :: map        {{ tex \mapsto }}
  | setin        ::  :: contains   {{ tex \in }}
  | |>           ::  :: contextin  {{ tex \triangleright }}
  | <|           ::  :: contextout {{ tex \triangleleft }}
  | notin        ::  :: notin      {{ tex \notin }}
  | |-           ::  :: turnstile  {{ tex \vdash }}
  | ex           ::  :: exists     {{ tex \exists }}
  | B^           ::  :: bigand     {{ tex \bigwedge }}
  | ^            ::  :: and        {{ tex \wedge }}
  | cap          ::  :: cap        {{ tex \cap }}

defns
Jop :: '' ::=

 defn
 Val ( o @ S . m ) = v ::  ::valof::'valof_' by

 defn
 Next ( o @ S . m ) = S' ::  ::nextof::'nextof_' by

 defn
 mu ( x ) = v ::  ::mapof::'stmap_' by

 defn
 LV ( t ) = </ xi // i /> ::  ::localvars::'lv_' by

 defn
 fresh ( </ xi // i /> , mu ) ::  ::freshvars::'fresh_' by

 defn
 x notin mu ::  ::notin::'ni_' by

 defn
 dom ( G ) cap dom ( mu ) = empty ::  ::distinct::'di_' by

 defn
 dom ( mu ) cap dom ( mu' ) = empty ::  ::disjointstores::'ds_' {{ com [[mu]] is disjoint from [[mu']] }} by

 defn
 distinct ( </ xi // i /> ) ::  ::distinctvars::'dv_' by

 defn
 valid ( mu ) ::  ::validstore::'vs_' {{ com [[mu]] is a valid store }} by

 --------------- :: empty
 valid ( empty )

 distinct ( </ xi // i /> )
 --------------- :: vars
 valid ( </ xi |-> vi // i /> )

 valid ( mu )
 valid ( mu' )
 dom ( mu ) cap dom ( mu' ) = empty
 ---------------------------------- :: concat
 valid ( mu , mu' )

 defn
 t | mu --> t' | mu' :: ::reduce::'r_' {{ com [[t]] with store [[mu]] reduces to [[t']] with store [[mu']] }}
 {{ tex [[t]] \mid [[mu]] \; [[-->]] \; [[t']] \mid [[mu']] }}
  by


    t' | mu --> t'' | mu'
    ------------------------------------------------  :: let_term
    let x = t' in t | mu --> let x = t'' in t | mu'

    ------------------------------------------------  :: let_value
    let x = v in t | mu --> t | mu [ x |-> v ]

    t | mu --> t' | mu'
    ------------------------------------------------  :: update_term
    x := t | mu , x |-> v --> x := t' | mu' , x |-> v


    ------------------------------------------------  :: update_value
    x := v | mu , x |-> v' --> unit | mu , x |-> v

    t | mu --> t'' | mu'
    ----------------------------- :: seq_left_term
    t ; t' | mu --> t'' ; t | mu'

    
    --------------------- :: seq_left_value
    v ; t | mu --> t | mu


    mu ( x ) = \ ( </ pi : Ti >> Ti' // i /> ) . t
    --------------------------  :: fun_call
    x ( </ xi // i /> ) | mu --> { </ xi / pi // i /> } t | mu


    Val ( o @ S . m ) = v
    Next ( o @ S . m ) = S'
    ----------------------------  :: meth_call
    x . m | mu , x |-> o @ S --> v | mu , x |-> o @ S'


defns Jty :: '' ::=

  defn
  G ( x ) = T  ::  ::typeof::'to_' {{ com [[x]] has type [[T]] in [[G]] }} by

  defn
  Meth ( O @ S . m ) ::  ::validmeth::'vm_' {{ com [[m]] is a known method of object type [[O]] at state [[S]]}} by

  defn
  Next ( O @ S . m ) = S' ::  ::nextstate::'ns_' {{ com [[S']] is the next state after calling method [[m]] on object type [[O]] in state [[S]]}} by

  defn
  RType ( O @ S . m ) = T ::  ::returntype::'rt_' {{ com [[T]] is the return type of method [[m]] on object type [[O]] in state [[S]]}} by

  defn
  x notin G  ::  ::notincontext::'ni_' {{ com [[x]] is unknown in [[G]] }} by

  defn
  sv : st   ::  ::methtype::'mt_' {{ com state declaration [[sv]] matches state typing [[st]]}} by

  empty |> vi : Ti <| empty
  -------------------- :: state
  S { </ mi = ( vi , Si ) // i /> } : S { </ mi : Ti >> Si // i /> }

  defn
  dom ( G ) cap dom ( G' ) = empty  ::  ::disjointgamma::'dg_' {{ com [[G]] is disjoint from [[G']] }} by

  defn
  distinct ( </ xi // i /> ) ::  ::distinctvarsgamma::'dvg_' by

  defn
  valid ( G )  ::  ::validgamma::'vg_' {{ com context [[G]] is valid}} by

  ------------- :: empty
  valid ( empty )

  distinct ( </ xi // i /> )
  ---------------------------- :: vars
  valid ( </ xi : Ti // i /> )

  valid ( G )
  valid ( G' )
  dom ( G ) cap dom ( G' ) = empty
  ------------- :: concat
  valid ( G , G' )

  defn
  G |- mu  ::  ::storetype::'st_' {{ com store [[mu]] is well typed against context [[G]] }} by

  -------------- :: empty
  empty |- empty

  G |> vi : Ti <| G
  ------------------------------------------------ :: vars
  </ xi : Ti // i /> |- </ xi |-> vi // i />

  G |- mu
  G' |- mu'
  valid ( G , G' )
  ---------------- :: concat
  G, G' |- mu , mu'

  G |- mu
  ------------- :: extra
  G |- mu , mu'


  defn
  G |> t : T <| G' :: ::type::'t_'  {{ com [[t]] has type [[T]] in context [[G]], producing a new context [[G']]}} by

  --------------------- :: unit
  G |> unit : Unit <| G

  
  svi : sti
  ------- :: object
  G |> [ </ svi // i /> ] @ S : { </ sti // i /> } @ S <| G

  </ xi : Ti // i /> |> t : T <| </ xi : Ti' // i />
  ---------------------------------------------------------------------------- :: fun_def
  G |> \ ( </ xi : Ti >> Ti' // i />) . t : ( </ Ti >> Ti' // i /> ) -> T <| G

  x notin G
  G |> t' : T' <| G'
  G' , x : T' |> t : T <| G'' , x : T''
  --------------- :: let
  G |> let x = t' in t : T <| G''

  G |> t : T' <| G'
  --------------------------------------- :: update
  G , x : T |> x := t : Unit <| G' , x : T'

  G |> t : T <| G'
  G' |> t' : T' <| G''
  ----------------------- :: seq
  G |> t ; t' : T' <| G''

  
  G ( x ) = ( </ Ti >> Ti' // i /> ) -> T
  ---------------------------------------------------------------------------- :: fun_call
  G , </ xi : Ti // i /> |> x ( </ xi // i /> ) : T <| G, </ xi : Ti' // i />


  Meth ( O @ S . m )
  Next ( O @ S . m ) = S'
  RType ( O @ S . m ) = T
  ------- :: meth_call
  G , x : O @ S |> x . m : T <| G , x : O @ S'

  G |> t : T <| G' , G''
  ---------------------- :: drop
  G |> t : T <| G'

%  defn
%  [[ G |> t : a <| G' ]] = C  ::  ::cgen::'cg_'  {{ com constraint [[C]] generated from typing of [[t]] }} by
%
%  ----------------------------------- :: unit
%  [[ G |> unit : a <| G' ]] = a = Unit

  
%  svi : sti
%  ----------------------------------- :: object
%  [[ G |> [ </ svi // i /> ] @ S : a <| G' ]] = a = { </ sti // i /> } @ S


%  [[ G' |> t : a <| G'' ]] = C'
%  ------------------------------------------------------------------------------------------ :: fun_def
%  [[ G |> \ ( </ xi // i /> ) . t : a -> T <| G''' ]] = C'

%  [[ G |> t : T <| G' ]] = C'
%  ------------------------------------- :: defvar
%  [[ G |> var x = t : Unit <| G'' ]] = C' ^ G' ( x ) = T

%  --------------------------------- :: seq
%  [[ G |> t ; t' : T' <| G'' ]] = C

%  -------------------------------------------- :: fun_call
%  [[ G |> x ( </ xi // i /> ) : T <| G' ]] = C
  
%  ------------------------------ :: meth_call
%  [[ G |> x . m : T <| G' ]] = C
